{"version":3,"file":"main.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,MAAM;AACN;AACA,sCAAsC;AACtC,MAAM;AACN;AACA,sCAAsC;AACtC;AACA;AACA,gDAAgD;AAChD;AACA,0DAA0D,cAAc,QAAQ,YAAY,wBAAwB,uBAAuB;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,+CAA+C;AAC/C,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sBAAsB,qCAAqC,uBAAuB,uCAAuC,yBAAyB,2CAA2C,cAAc,qBAAqB,qBAAqB;AAC/S;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,2BAA2B;AAC3B","sources":["webpack://restaurant/webpack/bootstrap","webpack://restaurant/webpack/runtime/define property getters","webpack://restaurant/webpack/runtime/hasOwnProperty shorthand","webpack://restaurant/webpack/runtime/make namespace object","webpack://restaurant/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","document.addEventListener(\"DOMContentLoaded\", function() {\r\n  const calculateProfitButton = document.getElementById(\"calculate-profit-button\");\r\n  const calculateYieldButton = document.getElementById(\"calculate-yield-button\");\r\n\r\n  calculateProfitButton.addEventListener(\"click\", calculateProfit);\r\n  calculateYieldButton.addEventListener(\"click\", calculateYield);\r\n});\r\n\r\nfunction calculateYield() {\r\n  const days = parseFloat(document.getElementById(\"days\").value);\r\n    const selectedCrop = document.getElementById(\"crop\").value;\r\n    const cornDays = parseFloat(document.getElementById(\"corn-days\").value);\r\n    const chiliDays = parseFloat(document.getElementById(\"chili-days\").value);\r\n    const spinachDays = parseFloat(document.getElementById(\"spinach-days\").value);\r\n    let yieldPerDay = 0;\r\n    let daysNeeded = 0;\r\n\r\n    if (selectedCrop === \"corn\") {\r\n        daysNeeded = cornDays;\r\n        yieldPerDay = 5 / daysNeeded; // Example yield per day in kilograms per square meter for corn\r\n    } else if (selectedCrop === \"chili\") {\r\n        daysNeeded = chiliDays;\r\n        yieldPerDay = 1 / daysNeeded; // Example yield per day in kilograms per square meter for chili\r\n    } else if (selectedCrop === \"spinach\") {\r\n        daysNeeded = spinachDays;\r\n        yieldPerDay = 2 / daysNeeded; // Example yield per day in kilograms per square meter for water spinach\r\n    }\r\n\r\n    const totalYield = yieldPerDay * days * 25; // Calculate total yield for 25 square meters\r\n    const resultElement = document.getElementById(\"result\");\r\n    resultElement.textContent = `The estimated yield of ${selectedCrop} after ${daysNeeded} days is approximately ${totalYield.toFixed(2)} kilograms.`;\r\n}\r\n\r\nfunction calculateProfit() {\r\n  const cornYield = parseFloat(document.getElementById(\"corn-yield\").value);\r\n  const chiliYield = parseFloat(document.getElementById(\"chili-yield\").value);\r\n  const spinachYield = parseFloat(document.getElementById(\"spinach-yield\").value);\r\n\r\n  const cornProfit = cornYield * cornPrice; // Set corn price per ton\r\n  const chiliProfit = chiliYield * chiliPrice; // Set chili price per ton\r\n  const spinachProfit = spinachYield * spinachPrice; // Set spinach price per ton\r\n\r\n  const profits = [cornProfit, chiliProfit, spinachProfit];\r\n  const maxProfit = Math.max(...profits);\r\n  const cropNames = [\"Corn\", \"Chili\", \"Water Spinach\"];\r\n  const bestCropIndex = profits.indexOf(maxProfit);\r\n  const bestCropName = cropNames[bestCropIndex];\r\n\r\n  const resultElement = document.getElementById(\"result\");\r\n  resultElement.textContent = `The profit for corn is RM${cornProfit.toFixed(2)}.\\n\\n\\n\\nThe profit for chili is RM${chiliProfit.toFixed(2)}.\\nThe profit for water spinach is RM${spinachProfit.toFixed(2)}.\\n\\nThe best crop for maximum profit is ${bestCropName} with a profit of RM${maxProfit.toFixed(2)}`;\r\n}\r\n\r\n// Set your crop prices here\r\nconst cornPrice = 6; // Price per ton\r\nconst chiliPrice = 12; // Price per ton\r\nconst spinachPrice = 3.50; // Price per ton\r\n\r\nexport { calculateProfit }"],"names":[],"sourceRoot":""}